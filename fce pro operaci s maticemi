#include <stdio.h>

// fce pro vytvoreni matice
void vytvorMatici(float matice[][5], int radky, int sloupce) {
    for (int i = 0; i < radky; ++i) {
        for (int j = 0; j < sloupce; ++j) {
            printf("Zadejte prvek na pozici (radek, sloupec)(%d, %d): ", i + 1, j + 1);
            scanf("%f", &matice[i][j]);
        }
    }
}

// fce pro scitani matic
void sectiMatice(float matice1[][5], float matice2[][5], float vysledek[][5], int radky, int sloupce) {
    for (int i = 0; i < radky; ++i) {
        for (int j = 0; j < sloupce; ++j) {
            vysledek[i][j] = matice1[i][j] + matice2[i][j];
        }
    }
}

// fce pro odcitani matic
void odectiMatice(float matice1[][5], float matice2[][5], float vysledek[][5], int radky, int sloupce) {
    for (int i = 0; i < radky; ++i) {
        for (int j = 0; j < sloupce; ++j) {
            vysledek[i][j] = matice1[i][j] - matice2[i][j];
        }
    }
}

// fce pro nasobeni matic
void vynasobMatice(float matice1[][5], float matice2[][5], float vysledek[][5], int radky1, int sloupce1, int sloupce2) {
    for (int i = 0; i < radky1; ++i) {
        for (int j = 0; j < sloupce2; ++j) {
            vysledek[i][j] = 0;
            for (int k = 0; k < sloupce1; ++k) {
                vysledek[i][j] += matice1[i][k] * matice2[k][j];
            }
        }
    }
}

// fce pro nasobeni matice sklalrnim cislem
void vynasobSkalarniCislo(float matice[][5], int radky, int sloupce, float skalarniCislo) {
    for (int i = 0; i < radky; ++i) {
        for (int j = 0; j < sloupce; ++j) {
            matice[i][j] *= skalarniCislo;
        }
    }
}

// fce pro vypis matice do konzole
void vypisMatici(float matice[][5], int radky, int sloupce) {
    for (int i = 0; i < radky; ++i) {
        for (int j = 0; j < sloupce; ++j) {
            printf("%.2f\t", matice[i][j]);
        }
        printf("\n");
    }
}

// pomocna fce pro vypocet determinantu matice
float determinantMatice(float matice[][5], int velikost) {
    if (velikost == 1) {
        return matice[0][0];
    }

    float determinant = 0;
    float podmatice[5][5];

    for (int k = 0; k < velikost; ++k) {
        int i, j;
        for (i = 1; i < velikost; ++i) {
            for (j = 0; j < k; ++j) {
                podmatice[i - 1][j] = matice[i][j];
            }
            for (j = k + 1; j < velikost; ++j) {
                podmatice[i - 1][j - 1] = matice[i][j];
            }
        }
        determinant += (k % 2 == 1 ? -1 : 1) * matice[0][k] * determinantMatice(podmatice, velikost - 1);
    }

    return determinant;
}

// fce pro vypocet transponovane matice
void transponujMatici(float matice[][5], float transponovanaMatice[][5], int radky, int sloupce) {
    for (int i = 0; i < radky; ++i) {
        for (int j = 0; j < sloupce; ++j) {
            transponovanaMatice[j][i] = matice[i][j];
        }
    }
}

// Funkce pro vÃ½pis matice do souboru
//void vypisMaticiDoSouboru(FILE *soubor, float matice[][5], int radky, int sloupce) {
//    for (int i = 0; i < radky; ++i) {
//       for (int j = 0; j < sloupce; ++j) {
//            fprintf(soubor, "%.2f\t", matice[i][j]);
//        }
//        fprintf(soubor, "\n");
//    }
//}
